// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/06/2024 13:13:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Practica_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Practica_2_vlg_sample_tst(
	C,
	E,
	S,
	sampler_tx
);
input  C;
input  E;
input  S;
output sampler_tx;

reg sample;
time current_time;
always @(C or E or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Practica_2_vlg_check_tst (
	A,
	R,
	V,
	sampler_rx
);
input  A;
input  R;
input  V;
input sampler_rx;

reg  A_expected;
reg  R_expected;
reg  V_expected;

reg  A_prev;
reg  R_prev;
reg  V_prev;

reg  A_expected_prev;
reg  R_expected_prev;
reg  V_expected_prev;

reg  last_A_exp;
reg  last_R_exp;
reg  last_V_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	R_prev = R;
	V_prev = V;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	R_expected_prev = R_expected;
	V_expected_prev = V_expected;
end



// expected R
initial
begin
	R_expected = 1'bX;
end 

// expected A
initial
begin
	A_expected = 1'bX;
end 

// expected V
initial
begin
	V_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or R_expected or R or V_expected or V)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected R = %b | expected V = %b | ",A_expected_prev,R_expected_prev,V_expected_prev);
	$display("| real A = %b | real R = %b | real V = %b | ",A_prev,R_prev,V_prev);
`endif
	if (
		( A_expected_prev !== 1'bx ) && ( A_prev !== A_expected_prev )
		&& ((A_expected_prev !== last_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp = A_expected_prev;
	end
	if (
		( R_expected_prev !== 1'bx ) && ( R_prev !== R_expected_prev )
		&& ((R_expected_prev !== last_R_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_exp = R_expected_prev;
	end
	if (
		( V_expected_prev !== 1'bx ) && ( V_prev !== V_expected_prev )
		&& ((V_expected_prev !== last_V_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_expected_prev);
		$display ("     Real value = %b", V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_exp = V_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Practica_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C;
reg E;
reg S;
// wires                                               
wire A;
wire R;
wire V;

wire sampler;                             

// assign statements (if any)                          
Practica_2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.C(C),
	.E(E),
	.R(R),
	.S(S),
	.V(V)
);

// S
initial
begin
	S = 1'b0;
	S = #10000 1'b1;
	S = #50000 1'b0;
	S = #130000 1'b1;
	S = #40000 1'b0;
	S = #70000 1'b1;
	S = #60000 1'b0;
	S = #10000 1'b1;
	S = #90000 1'b0;
end 

// E
initial
begin
	E = 1'b0;
	E = #60000 1'b1;
	E = #50000 1'b0;
	E = #80000 1'b1;
	E = #40000 1'b0;
	E = #10000 1'b1;
	E = #50000 1'b0;
	E = #80000 1'b1;
	E = #90000 1'b0;
end 

// C
initial
begin
	C = 1'b0;
	C = #110000 1'b1;
	C = #60000 1'b0;
	C = #70000 1'b1;
	C = #50000 1'b0;
	C = #10000 1'b1;
	C = #60000 1'b0;
	C = #10000 1'b1;
	C = #90000 1'b0;
end 

Practica_2_vlg_sample_tst tb_sample (
	.C(C),
	.E(E),
	.S(S),
	.sampler_tx(sampler)
);

Practica_2_vlg_check_tst tb_out(
	.A(A),
	.R(R),
	.V(V),
	.sampler_rx(sampler)
);
endmodule

